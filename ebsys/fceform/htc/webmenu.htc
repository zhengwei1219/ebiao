<PUBLIC:COMPONENT>
<PUBLIC:ATTACH EVENT="ondocumentready"   ONEVENT="fnInit()" />
<PUBLIC:METHOD NAME="Init"/>	//重新初始化菜单的方法  no use
<PUBLIC:METHOD NAME="showMenu"/>
<PUBLIC:METHOD NAME="hideMenu"/>
<PUBLIC:PROPERTY NAME = "DataSource" />
<PUBLIC:PROPERTY NAME = "Width" />
<PUBLIC:PROPERTY NAME = "Effect" /> //这里设置了菜单出现的效果，比如从左到右从上到下或者粒子效果
<PUBLIC:PROPERTY NAME = "MenuType" /> //这里指定菜单的类型-主菜单还是其他类型等
<PUBLIC:PROPERTY NAME = "Container" /> //菜单的容器
<PUBLIC:PROPERTY NAME = "showed" /> //菜单是否已显示 ="是/否"
<PUBLIC:PROPERTY NAME = "curId" />  //显示菜单的对象ID

<script  LANGUAGE=javascript>
/**
<MenuItem Func=""   Text="一级菜单项2"  img="addNew.gif" hasSub="1" HeadColumn="2" subWidth="200">

各属性说明：
Func：菜单项上点击时候触发的函数
Text：菜单项文本
img：菜单项左侧的图片
hasSub：是否有下级菜单
HeadColumn：菜单项头部由几项组成，1为仅含图片或者可勾选项 2为同时包含可勾选项和图片项
subWidth：子菜单宽度
hasLine：在该菜单项下画一分隔线
checked：是否被选中
isCheckItem：是否是可构选项

关于各个属性，需要说明的是

1。除了Func和Text节点，其他都不是必须的，仅当需要的时候才需要加上。
2。如果hasSub＝1，则subWidth为必需的，这里指定宽度后能够避免后面计算的麻烦。
3。Root下第一个节点只需要且必须要  hasSub="" subWidth=""  ，在没有任何菜单的时候这是必须的。




我们的菜单样式完全模仿windowxp的蓝色主题的效果，所以大家可以看看windowxp的蓝色主题来体会实际的效果
在Menutest.htm里面，我们曾经写过这些代码：
1。<link rel="stylesheet" type="text/css" href="Menu.css">
2。<WebMenu DataSource="xmlData" class="WebMenu" id="Menu1" Width="100" Effect="2" MenuType="1" Container="MenubarDiv"></WebMenu>
其中第一个是给页面链接一个样式表文件，第二个中有个class="WebMenu" ，它是通过menu.css里面的
.WebMenu{
    BEHAVIOR: url("WebMenu.htc")                          
}
来调用WebMenu.htc来将我们配置好的菜单xml数据转换成实际的HTML形式的菜单。

menu.css

.WebMenu{
    BEHAVIOR: url("WebMenu.htc")                          
}

//菜单表格的风格，其中用了一个阴影滤镜以增加菜单的立体感，最后的table-layout:fixed重要，因为表格可能因为它里面的内容自动调整，如果用了table-layout:fixed，那么我们指定是多少它就是多少。
.MenuPanel 
{
 border: 1px solid #002D96;
 cursor:hand;
 filter:progid:DXImageTransform.Microsoft.Shadow(enabled=true,color=#99CCFF,direction=135,strength=3);
 table-layout:fixed;
}

//鼠标在菜单项上移动的时候需要模拟一个高亮的层
.ItemHightLightDiv 
{  
 border: 1px solid #000080; 
 background-color: #FFEEC2;
 position: absolute;
 z-index:6;
 height:23px;
 left:2px;
 cursor:hand;
}

//鼠标在菜单项上移动的时候需要模拟一个高亮的表格
.ItemHighLightTable
{
 table-layout:fixed;
 width:100%;
  height:100%;
 cursor:hand;
}

//鼠标在菜单项上移动的时候需要模拟一个高亮的TD
.ItemHL
{   padding-left:6px;
 font-size: 10pt;
 white-space:nowrap;
}

//菜单一般状态下的样式
.ItemNormal
{
    padding-left:4px;
    height:25px;
 font-size: 10pt; 
 padding-top:2px;
 background-color: #F6F6F6;
 border-Bottom: 1px solid #F6F6F6;
 white-space:nowrap;
}

//菜单项如果有分隔线，就用这个样式
.ItemNormalLine
{ 
    padding-left:4px;
    padding-top:2px;
    height:25px;
 font-size: 10pt; 
 background-color: #F6F6F6;
 border-Bottom: 1px solid #6A8CCB;
 white-space:nowrap;
}

//菜单前两列是checkbox和图片，渐变的背景是跨两个TD，所以有左半边和右半边两个样式，因为渐变的滤镜对尺寸很敏感，所以我这里已经将滤镜注释掉，该用渐变的背景图片替代
.PicColummLeftHalf
{
 padding-left:7px;
 height:25px;
 width:26px;
 afilter:progid:DXImageTransform.Microsoft.gradient(startcolorstr=#E3EFFF,endcolorstr=#8EB3E7,gradientType=1);
 background-image:url(LeftHalf.gif);
}
.PicColummRightHalf
{
 height:25px;
 width:26px;
 padding-left:5px;
 afilter:progid:DXImageTransform.Microsoft.gradient(startcolorstr=#8EB3E7,endcolorstr=#88AEE4,gradientType=1);
 background-image:url(RightHalf.gif);
}

//菜单左列只有一个（或checkbox或pic），则渐变的背景跨一个TD
.PicColummFull
{
 padding-left:5px;
 height:25px;
 width:26px;
 afilter:progid:DXImageTransform.Microsoft.gradient(startcolorstr=#DDECFE,endcolorstr=#81A9E2,gradientType=1);
 background-image:url(FullBG.gif);
}

//菜单的Div，也就是最外面的容器。
//一个Popup里面HTML层次是这样Body－Div(class='DivPanel')－Table(class='MenuPanel')－Tbody－TR－TD(class='PicColummFull/ItemNormal等')
//这里要 visibility:hidden，以便能够使用各种菜单淡入的效果
.DivPanel{
 position: relative;  
 height: 1px; 
 z-index: 2; 
 visibility:hidden;
}

//以下这些样式是当菜单作为置顶的主菜单的时候使用的

//主菜单鼠标滑过时高亮的黄色效果，这个黄色效果带垂直的渐变因为这里尺寸不确定因素不大，所以用渐变滤镜没发现什么问题

.MenubarHLYellow
{
 text-align:center;
 padding-right:4px;
 padding-left:4px;
 padding-top: 1px; 
 padding-bottom: 1px;
 filter:progid:DXImageTransform.Microsoft.gradient(startcolorstr=#FFF4CC,endcolorstr=#FFD79D,gradientType=0);
 border: 1px solid #000080;
}

//主菜单鼠标点击后时高亮的蓝色效果，这个蓝色效果带垂直的渐变，因为这里尺寸不确定因素不大，所以用渐变滤镜没发现什么问题
.MenubarHLBlue
{
 text-align:center;
 padding-right:4px;
 padding-left:4px;
 padding-top: 1px; 
 padding-bottom: 1px;
 filter:progid:DXImageTransform.Microsoft.gradient(startcolorstr=#E3EFFF,endcolorstr=#98B9E8,gradientType=0);
 border: 1px solid #000080;
}

//主菜单的外观效果
.Menubar{
 background-color: #98B9E8;
 font-size: 10pt;
    height:24px;
    width:100%;  
    cursor:hand;
}

//主菜单条中菜单项原始效果，可以用作鼠标移出时还原的效果用
.MenubarNormal{ 
 font-size: 10pt;
    white-space:nowrap;
    padding-left:4px;
    padding-right:4px;
    padding-top: 1px; 
    padding-bottom: 1px;
    cursor:hand;
    border:1px solid #98B9E8;
}

到此为止，我们已经把菜单数据和样式大致讲解了以下，接下来的时间里我们就要进入最精彩的HTC组件的编程部分了。



**/
var sepWidth = 1 ; //图片列与文字列之间的间距
	   function Init(){fnInit();}
       function SetDom(sXml) {
			var oXml=new ActiveXObject("Microsoft.XMLDOM");
			oXml.async=false;
			oXml.loadXML (sXml);
			return oXml;
       }

       /**
       初始化默认值
       这个函数根据不同的菜单类型进行不同的处理，主菜单是要创建一个菜单条，
       右键菜单就把当前的window和document对象设置为初始的容器，同时还设置了在页面上点击时隐藏菜单。
		**/
       function fnInit(){
            if (typeof eval("window.document.all."+DataSource)=="object")
            {
               element.dataSource =eval("window.document.all."+DataSource);   //从xml文件中取数
            }
            else {
				
	   		   element.dataSource =SetDom(eval("window.document.all."+DataSource)); //从xml串中取数
	   		}
	   		/*
			if(element.dataSource.documentElement == null) {
				var oo=SetDom("<root />")
				alert("a")
				if(oo.documentElement == null)
					alert("ab")
				
			}*/
	   		initData = element.dataSource.documentElement.selectSingleNode("//MenuItem");
	   		if(element.MenuType=="1"){
		   		initWindow = window;
		   		initoEle = window.document.body;
		   		window.document.childWin=null;
		   		/*window.document.attachEvent("oncontextmenu",function(){ 
		   			showMenu(initWindow,initData,initoEle,event.x,event.y)
		   		});*/
	   		}
	   		else{
	   		    oMenubar = createMenuBar();
	   			eval("window.document.all."+element.Container+".appendChild(oMenubar)");
	   		}
	   		window.document.attachEvent("onmousedown",function(){
	   				//alert(event.srcElement.outerHTML);
	   			   if(event.srcElement.id == curId ) return;
					hideMenu();
	   		});  
	   }
	   /**
	   * 隐藏菜单
	   *@date 2006-06-21
	   **/
	   function hideMenu() {
	   		showed="否";
	   		hideSubMenu(window);
	   		if(!element.Menubar) return;
	   		element.Menubar.isDisplay=false;
	   		oEles = element.Menubar.getElementsByTagName("SPAN");
			for(i=0;i<oEles.length;i++){
			    oEles[i].className="MenubarNormal";
			}
	   } 
	   /**
	   建立popup窗口,该窗口从属于参数oPopup指向的窗口
	   只要是创建一个当前window的子window，并且设定样式单
	   oParentWin不能设定childWin属性，所以只能加在oParentWin.document上了
		**/

	   function fnCreatePopup(oParentWin){
			oNewChildWin = oParentWin.document.parentWindow.createPopup();
			oNewChildWin.document.createStyleSheet('../../fceform/css/menu.css');   
			oParentWin.document.childWin = oNewChildWin;
	   }
	     
        /**
        菜单淡入效果,可以在页面上通过Effect属性设置。	
        这里用到了动态滤镜的概念，一般我们淡入的话会用setTimeout来改变透明值，但是那样会有问题，
        比如我这边还在淡入，但菜单上鼠标滑过的时候要高亮显示，这样，高亮显示的地方是半透明的等等之类的问题，
        所以用了动态滤镜的播放来实现菜单显示效果。
   
        **/
	    function fadeIn(oDiv){
	       oDiv.style.visibility="hidden";
	       switch(element.Effect){
	       	case("1")://从左到右展开
	       	  strfilter = "progid:DXImageTransform.Microsoft.GradientWipe(duration=0.5,gradientSize=0.75,motion=forward)";
	       	break;
	       	case("2")://粒子效果
	       	 strfilter = "progid:DXImageTransform.Microsoft.RevealTrans ( duration=0.5,transition=12 )" ;
	       	 break;
	       	case("3")://从上到下
	       	 strfilter = "progid:DXImageTransform.Microsoft.GradientWipe ( duration=0.5,gradientSize=0.25,motion=forward,wipeStyle=1)";
	       	 break;
	       	case("4")://最普通的淡入
	       	 strfilter = "progid:DXImageTransform.Microsoft.Fade()";
	       	break;
	       	default:
	       	  strfilter = "progid:DXImageTransform.Microsoft.GradientWipe(duration=0.5,gradientSize=0.75,motion=forward)"; 
	       }
	      oDiv.style.filter = strfilter;
	      oDiv.filters[0].Apply();
	      oDiv.style.visibility="visible";
	      oDiv.filters[0].play(0.2);
		}

	   //显示菜单的主函数，里面包含了若干个小函数
	   function showMenu(oCurrWin,NodeData,oEle,x,y){ 
               
	            //当前窗口尚未有子窗口，则新建子窗口，然后创建样式。
               // if(oCurrWin.document.childWin==null){
		            fnCreatePopup(oCurrWin);
			   // }
			    oChildWin = oCurrWin.document.childWin;
			    
			    //如果当前窗口的子窗口存在
                //如果当前将要显示的窗口内容不是之前所显示的窗口内容
                //或者将要显示的窗口内容不存在,则重新写入将要显示的窗口菜单内容
		       // if(!oCurrWin.document.body.preShowItem||oCurrWin.document.body.preShowItem!=oEle){     
			    	oChildWin.document.body.innerHTML = "";
			    	//hasSub="1"  HeadColumn="1" subWidth="220"
			    	
			    	//hasSub          = (NodeData.attributes.getNamedItem("hasSub"))?true:false;
			    	subWidth        = (NodeData.attributes.getNamedItem("subWidth"))?NodeData.attributes.getNamedItem("subWidth").text:false;
			    	HeadColumn      = (NodeData.attributes.getNamedItem("HeadColumn"))?NodeData.attributes.getNamedItem("HeadColumn").text:"0";
			    	
			    	
		   			oDiv = createBasePanel(oChildWin,subWidth);
		   			oChildWin.document.body.appendChild(oDiv);
		   			iHeight=4;
			   		for(i=0;i<NodeData.childNodes.length;i++){
						oTR = createItemTemp(oDiv,oChildWin,HeadColumn,subWidth*1);
			   		    aNode = NodeData.childNodes.item(i);
			   			fillMenuItemData(aNode,oTR,oChildWin,HeadColumn);
			   			iHeight = iHeight + 25;
			   		}
			   		createHLDiv(oChildWin,HeadColumn);
			   		oCurrWin.document.body.preShowItem = oEle;
			   		oChildWin.document.iHeight = iHeight*1;
			   		oChildWin.document.iWidth = subWidth*1+4;
              //  }
                
                
                //如果当前将要显示的窗口已经显示，则隐藏该子窗口上的高亮区，并不再做显示菜单的动作
               // if(typeof oChildWin.document.DivPanel != "undefined"){  //重新初始化时会undefined
					if(oCurrWin.document.body.preShowItem==oEle&&oChildWin.document.DivPanel.style.visibility=="visible"&&oChildWin.isOpen){
						oCurrWin.document.childWin.document.body.HLDiv.style.visibility="hidden";
                		return;
					}
               // }
                
                
                //执行显示子窗口子菜单动作
		   		if(x&&y){
		   			XConer = x;
		   			YConer = y;
		   		}
		   		else{
		   			XConer = oEle.offsetWidth+oEle.offsetLeft;
		   			YConer = oEle.offsetTop;
		   		}
		   		
				oChildWin.show(XConer,YConer,oChildWin.document.iWidth,oChildWin.document.iHeight,oCurrWin.document.body);
				

	     		//使用淡入效果显示菜单
                //if(typeof oChildWin.document.DivPanel != "undefined"){  //重新初始化时会undefined
	     			fadeIn(oChildWin.document.DivPanel);
				//}		
				
				showed="是";
				//禁止系统右键菜单的弹出。
				try{
		   			event.returnValue = false;
		   		}
		   		catch(e){
		   		}
	   }
	   
	   function createHLDiv(oPopup,HeadColumn){
	   	//创建一个鼠标移动到菜单项的高亮效果层
                oHLDiv = oPopup.document.createElement("DIV");
				oTable = oPopup.document.createElement("<TABLE height='100%' border=\"0\" cellspacing=\"0\" cellpadding=\"0\">");
	     		oTBody = oPopup.document.createElement("TBODY");//TBODY是必须要的元素，不然表格无法显示
				oTable.className = "ItemHighLightTable";
	     		oHLDiv.className = "ItemHightLightDiv"; 
	     		
	     		oHLDiv.appendChild(oTable);
	     		oTable.appendChild(oTBody);
	     		
           		oTR = oTable.insertRow();
           		
           		switch(HeadColumn){
           			case "0":
           			    oTD = oTR.insertCell();
	   					oTD.style.width = 23;
	   					oTD.className = "ItemHL" ;
	   					oTR.picTD = oTD;
           			break;
           			case "1":
           			    oTD = oTR.insertCell();
	   					oTD.style.width = 23;
	   					oTD.className = "ItemHL" ;
	   					oTR.checkTD = oTD;
           			break;
           			case "2":
           				oTD = oTR.insertCell();
	   					oTD.style.width = 23;
	   					oTD.className = "ItemHL" ;
	   					oTR.picTD = oTD;
	   					
	   					oTD = oTR.insertCell();
	   					oTD.style.width = 23;
	   					oTD.className = "ItemHL" ;
	   					oTR.checkTD = oTD;
           			break;
           		}
           		
	   			oTD = oTR.insertCell();
	   			oTD.style.width = sepWidth ;
	   			oTD.className = "ItemHL" ;
	   			oTD.innerHTML = "&nbsp;";
            
            	oTD = oTR.insertCell();
	   			oTD.className = "ItemHL" ;
	   			oTR.textTD = oTD;
	   			oTD.noWrap = true;
            
            	oTD = oTR.insertCell();
	   			oTD.style.width = 22;
	   			oTD.className = "ItemHL" ;
	   			oTD.align = "center";
	   				   			
	     		oHLDiv.iTable = oTable;
	     		oHLDiv.iTable.iTBody = oTBody;
	     		oPopup.document.body.appendChild(oHLDiv);
	     		oHLDiv.style.visibility="hidden";
	     		oHLDiv.attachEvent("onclick",function() {
	     				var s1=new Eapi.Str().trim(oHLDiv.Func);
	     				if(isSpace(s1)) return;
	     				if(s1.substring(0,11) == "javascript:") {
	     					s1=s1.substring(11,s1.length) ;
	     				}else{
	     					s1="window."+s1;
	     				}
	     				eval(s1) ;
	     				
	     				hideSubMenu(window);
	     				showed='否';
	     			});
	     		oPopup.document.body.HLDiv = oHLDiv; 
	     		//请注意oPopup.document.createElement的用法。这是popup window的特性，必须显式指定window对象

	   }
	   
	   //鼠标移动高亮效果,把高亮层下面的内容取过来。
	   	function highLight(oEle,oWin){
	   	    switch(oEle.HeadColumn){
	   			case "0":
	   				oWin.document.body.HLDiv.iTable.cells[0].style.paddingLeft = "3px";
					oWin.document.body.HLDiv.iTable.cells[2].style.paddingLeft = "5px";
	   			break;
	   			case "1":
	   				oWin.document.body.HLDiv.iTable.cells[0].style.paddingLeft = "3px";
					oWin.document.body.HLDiv.iTable.cells[2].style.paddingLeft = "5px";
	   			break;
	   			case "2":
	   				oWin.document.body.HLDiv.iTable.cells[0].style.width=23;
					oWin.document.body.HLDiv.iTable.cells[1].style.width=25;
					oWin.document.body.HLDiv.iTable.cells[0].style.paddingLeft = "5px";
	   			break;
	   	    }
  			
			for(i=0;i<oWin.document.body.HLDiv.iTable.cells.length;i++){
				oWin.document.body.HLDiv.iTable.cells[i].innerHTML=oEle.cells[i].innerHTML;
	        }
	        

	        oWin.document.body.HLDiv.style.visibility="visible";
	     	oWin.document.body.HLDiv.style.top = oEle.offsetTop+1;
	     	oWin.document.body.HLDiv.style.width = oEle.offsetWidth - 2;
	     	oWin.document.body.HLDiv.Func = oEle.Func ;
	     	/*
	           oWin.document.body.HLDiv.attachEvent("onclick",function(){
				 if (oEle.Func=="") return;
				 eval("window."+oEle.Func);
				 hideSubMenu(window);
				});  
			*/
	     }
	   
	   //当鼠标移动到没有下级子菜单项上的时候，关闭下级子菜单
	   function hideSubMenu(oWin){
   		    try{
   		        oWin.document.childWin.document.body.HLDiv.style.visibility="hidden";
   				oWin.document.childWin.hide();	
   			}
   			catch(e){
   			}
	   }
	     
	   
	  //建立基板以便插入菜单项
	   function createBasePanel(oWin,subWidth){
	   	    oDiv = oWin.document.createElement("<DIV>");
	   	    oDiv.className = "DivPanel";
	   	    
	   	    oTable = oWin.document.createElement("<TABLE  border=\"0\" cellspacing=\"0\" cellpadding=\"0\">");
	   	    oTable.className = "MenuPanel"; 

	   	    oDiv.appendChild(oTable);
	   	    oTBody = oWin.document.createElement("TBODY");
	   	    oTable.appendChild(oTBody);
	   	    oWin.document.DivPanel = oDiv;
	   	    oDiv.TablePanel = oTable;
            return(oDiv);
	   }
	   
	   //建立菜单的项的模板
	   function createItemTemp(oDiv,oWin,HeadColumn,subWidth){
	   		oTable = oDiv.TablePanel;
	   		oTR = oTable.insertRow();
	   		switch(HeadColumn){
	   			case "0"://只有图片列
	   				oTD = oTR.insertCell();
	   				oTD.style.width = 26;
	   				oTD.className = "PicColummFull" ;
	   				oTR.picTD = oTD;
	   				subWidth = subWidth - 26;
	   			break;
	   			case "1"://只有选择列
	   				oTD = oTR.insertCell();
	   				oTD.style.width = 26;
	   				oTD.className = "PicColummFull" ;
	   				oTR.checkTD = oTD;
	   				subWidth = subWidth - 26;
	   			break;
	   			case "2"://两者都有
	   				oTD = oTR.insertCell();
	   				oTD.className = "PicColummLeftHalf" ;
	   				oTR.checkTD = oTD;
		   		
	   				oTD = oTR.insertCell();
	   				oTD.className = "PicColummRightHalf" ;
	   				oTR.picTD = oTD;
	   				subWidth = subWidth - 26*2;
	   			break;
	   			case "3"://两者都无
	   			break;
	   			default://默认只有图片列
	   			    oTD = oTR.insertCell();
	   				oTD.style.width = 26;
	   				oTD.className = "PicColummFull" ;
	   				oTR.picTD = oTD;
	   				subWidth = subWidth - 26;
	   		}

	   		oTD = oTR.insertCell();
	   		oTD.style.width = sepWidth;
	   		oTD.className = "ItemNormal" ;
	   		oTD.innerHTML = "&nbsp;";
	   		subWidth = subWidth - sepWidth;
            
            oTD = oTR.insertCell();
	   		oTD.className = "ItemNormal" ;
	   		oTD.style.width = subWidth*1 - 26;
	   		oTR.textTD = oTD;
	   		oTD.noWrap = true;
            
            oTD = oTR.insertCell();
	   		oTD.style.width = 26;
	   		oTD.className = "ItemNormal" ;
	   		oTD.align = "center";
	   		oTR.nextTD = oTD;
	   		oTD.style.paddingTop = "1px";
	   		oTD.style.paddingLeft = "6px";
	   		return(oTR);
	   }
	   

	   
	   //填充菜单项数据
	   function fillMenuItemData(oNode,oTR,oWin,HeadColumn){
			try{
	   		oIMG          = oNode.attributes.getNamedItem("img").text;
	   		}catch(e){}
	   		oFunc         = oNode.attributes.getNamedItem("Func").text;
			oText         = oNode.attributes.getNamedItem("Text").text;
			blhasSub      = oNode.attributes.getNamedItem("hasSub")?true:false;		
			blSplitLine   = oNode.attributes.getNamedItem("hasLine")?true:false;
			blChecked     = oNode.attributes.getNamedItem("checked")?true:false;
			blReadOnly    = oNode.attributes.getNamedItem("readonly")?true:false;

            switch(HeadColumn){
	   			case "1"://只有选择列
	   				oTR.checkTD.innerHTML = (blChecked)?"<img border=\"0\" src=\"../../fceform/images/ef_designer_menu_checked.gif\"  valign=\"absmiddle\" align=\"center\">":"&nbsp;" ;
	   			break;
	   			case "2"://两者都有
	   				oTR.picTD.innerHTML = (oIMG!="")?"<img border=\"0\" src=\""+oIMG+"\"  valign=\"absmiddle\" align=\"center\">":"&nbsp;" ;
	   				oTR.checkTD.innerHTML = (blChecked)?"<img border=\"0\" src=\"../../fceform/images/ef_designer_menu_checked.gif\"  valign=\"absmiddle\" align=\"center\">":"&nbsp;" ;
	   			break;
	   			case "3"://两者都无
	   			break;

	   			default://默认只有图片列
	   			    oTR.picTD.innerHTML = (oIMG!="")?"<img border=\"0\" src=\""+oIMG+"\"  valign=\"absmiddle\" align=\"center\">":"&nbsp;" ;
	   		}
	   					
			if(blhasSub){
				oTR.nextTD.innerHTML = "<Img src=\"../../fceform/images/ef_designer_menu_arrow.gif\" border=\"0\" valign=\"absmiddle\" width=\"16px\" height=\"16px\">";	
				oTR.attachEvent("onmouseover",function(){showMenu(oWin,oNode,oTR)});
			}
			else{
				oTR.nextTD.innerHTML = "&nbsp;";
				oTR.attachEvent("onmouseover",function(){hideSubMenu(oWin)});
			}
					
			if(blSplitLine){
				//oTR.picTD.className = "ItemNormalLine";
				oTR.nextTD.className = "ItemNormalLine";
				oTR.textTD.className = "ItemNormalLine";
			}else if(blReadOnly){
				oTR.nextTD.className = "ItemNormalReadOnly";
				oTR.textTD.className = "ItemNormalReadOnly";
			}
			else{
				oTR.nextTD.className = "ItemNormal";
				oTR.textTD.className = "ItemNormal";		
			}
	
			oTR.textTD.innerHTML = unescape(oText);    //让菜单内容支持HTML元素
			oTR.HeadColumn = HeadColumn;
			oTR.attachEvent("onmouseover",function(){highLight(oTR,oWin)});  
			oTR.Func = oFunc;   
	   }
	   //类型为主菜单的时候要创建一个菜单条，上面包含一级菜单
	   function createMenuBar(){
	   		BarData = element.dataSource.documentElement.selectSingleNode("//MenuItem");
	   		oTable = window.document.createElement("TABLE");
   			oTable.className = "Menubar";
   			oTBody = window.document.createElement("TBODY");
   			oTable.appendChild(oTBody);  
   			oTR = oTable.insertRow();
   			oTD = oTR.insertCell();
   			oIMG = window.document.createElement("IMG");
   			oIMG.src = "../../fceform/images/ef_designer_menu_left.gif";
   			oIMG.valign = "absmiddle"; 
   			oTD.appendChild(oIMG);
	   		for(i=0;i<BarData.childNodes.length;i++){
	   		    oNode = BarData.childNodes.item(i);
	   			var oNewSPAN = window.document.createElement("SPAN");
	   			oNewSPAN.className = "MenubarNormal"; 
	   			oNewSPAN.NodeData = oNode;
	   			oNewSPAN.innerHTML = oNode.attributes.getNamedItem("Text").text;
	   			oNewSPAN.hasSub = (oNode.attributes.getNamedItem("hasSub"))?true:false;
	   			oNewSPAN.style.width = 90;
	   			oTD.appendChild(oNewSPAN);
	   			oNewSPAN.attachEvent("onmouseover",MenuOver);
	   			oNewSPAN.attachEvent("onmousedown",MenuMouseDown);
	   		}
	   		element.Menubar = oTable;
	   		return oTable;
	   }
	   /**
	   这里两个函数主要是在主菜单上的效果，在没有点击的时候只是高亮效果，有下级菜单也不展开出来，
	   如果点击了之后有下级菜单的就会自动展现出来。 跟浏览器的菜单一般效果

	   **/
	   function MenuOver(){ 
	       hideSubMenu(window);
	       oEle = event.srcElement;
	       oEles = oEle.parentElement.getElementsByTagName("SPAN");
	       for(i=0;i<oEles.length;i++){
	       		oEles[i].className="MenubarNormal";
	       }
	       
	       if(element.Menubar.isDisplay==null||(element.Menubar.isDisplay!=null&&element.Menubar.isDisplay==false)){
	   	   		oEle.className = "MenubarHLYellow"; 
	   	   }
	   	   else{
	   	   		oEle.className = "MenubarHLBlue"; 
	   	   		if(!oEle.hasSub) return;
	   	   		showMenu(window,oEle.NodeData,oEle,getAbsLeft(oEle)+2,getAbsTop(oEle)+oEle.offsetHeight+1);
	   	   }
	   }
	   
	   function MenuMouseDown(){
	        oEle = event.srcElement;
	        element.Menubar.isDisplay = element.Menubar.isDisplay?false:true;
	   		event.srcElement.className = (oEle.className=="MenubarHLYellow")?"MenubarHLBlue":"MenubarHLYellow";
	   		if(element.Menubar.isDisplay&&oEle.hasSub) showMenu(window,oEle.NodeData,oEle,getAbsLeft(oEle)+2,getAbsTop(oEle)+oEle.offsetHeight+1);
	   		event.cancelBubble = true;
	   }
	      
	    function getAbsLeft(e){
            	var l=e.offsetLeft;
				while(e=e.offsetParent){
					l+=e.offsetLeft;
					}
				return l;
        }
        
	     function getAbsTop(e){
	    	var t=e.offsetTop;
			while(e=e.offsetParent){
				t+=e.offsetTop;
				}
			return t;
	     }
	    
</script>
</PUBLIC:COMPONENT>
